# -*- coding: utf-8 -*-
"""Worksheet0_RakshyaBaral.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1dSjrrF3ZJbyqKILT2gGdecFHYS27IDSB
"""

temperatures = [8.2, 17.4, 14.1, 7.9, 18.0, 13.5, 9.0, 17.8, 13.0, 8.5,
                16.5, 12.9, 7.7, 17.2, 13.3, 8.4, 16.7, 14.0, 9.5, 18.3,
                13.4, 8.1, 17.9, 14.2, 7.6, 17.0, 12.8, 8.0, 16.8, 13.7,
                7.8, 17.5, 13.6, 8.7, 17.1, 13.8, 9.2, 18.1, 13.9, 8.3,
                16.4, 12.7, 8.9, 18.2, 13.1, 7.8, 16.6, 12.5]
cold = []
mild = []
comfortable = []

for temp in temperatures:
    if temp < 10:
        cold = cold + [temp]
    elif 10 <= temp < 15:
        mild = mild + [temp]
    elif 15 <= temp <= 20:
        comfortable = comfortable + [temp]
print("Cold temperatures:", cold)
print("Mild temperatures:", mild)
print("Comfortable temperatures:", comfortable)

num_cold = len(cold)
num_mild = len(mild)
num_comfortable = len(comfortable)
print("Number of times it was cold:", num_cold)
print("Number of times it was mild:", num_mild)
print("Number of times it was comfortable:", num_comfortable)

temperatures_fahrenheit = []
for temp in temperatures:
    fahrenheit = (temp * 9/5) + 32
    temperatures_fahrenheit.append(fahrenheit)
print("Temperatures in Fahrenheit:", temperatures_fahrenheit)

night_temps = []
evening_temps = []
day_temps = []

for i in temperatures:
    if i >=0 and i<=8:
        night_temps.append(i)
    if i>=8 and i<=16:
        evening_temps.append(i)
    if i>=16 and i<=24:
        day_temps.append(i)

print("Night temperatures:", night_temps)
print("Evening temperatures:", evening_temps)
print("Day temperatures:", day_temps)
print("The average temp of day",(sum(day_temps)/len(day_temps)))

def sum_nested_list(nested_list):
    total = 0
    for element in nested_list:
        if isinstance(element, list):
            total += sum_nested_list(element)
        else:
            total += element
    return total
nested_list = [1, [2, [3, 4], 5], 6, [7, 8]]
total_sum = sum_nested_list(nested_list)
print(f"The total sum is {total_sum}.")

def generate_permutations(s):
    if len(s) <= 1:
        return [s]
    permutations = []
    for i, char in enumerate(s):
        remaining = s[:i] + s[i+1:]
        for perm in generate_permutations(remaining):
            new_permutation = char + perm
            if new_permutation not in permutations:
                permutations.append(new_permutation)
    return permutations
print("Permutations of 'abc':", generate_permutations("abc"))

def calculate_directory_size(directory):
    totalsize = 0
    for key, value in directory.items():
        if isinstance(value, dict):
            totalsize += calculate_directory_size(value)
        else:
            totalsize += value
    return totalsize
directory_structure = {
    "file1.txt": 200,
    "file2.txt": 300,
    "subdir1": {
        "file3.txt": 400,
        "file4.txt": 100,
    },
    "subdir2": {
        "subdir3": {
            "file5.txt": 250,
        },
        "file6.txt": 150,
    },
}

print(f"The total directory size is {calculate_directory_size(directory_structure)} KB.")

def min_coins(coins, amount):
    dp = [float('inf')] * (amount + 1)
    dp[0] = 0
    for coin in coins:
        for i in range(coin, amount + 1):
            dp[i] = min(dp[i], dp[i- coin] + 1)
    return dp[amount] if dp[amount] != float('inf') else -1

print(min_coins([1, 2, 5], 11))

def longest_common_subsequence(s1, s2):
    m, n = len(s1), len(s2)
    dp = [[0] * (n + 1) for _ in range(m + 1)]
    for i in range(1, m + 1):
        for j in range(1, n + 1):
            if s1[i - 1] == s2[j - 1]:
                dp[i][j] = dp[i - 1][j - 1] + 1
            else:
                dp[i][j] = max(dp[i - 1][j], dp[i][j - 1])
    return dp[m][n]
lcs_result = longest_common_subsequence("abcde", "ace")
print(f"The LCS between 'abcde' and 'ace' is: {lcs_result}")

def knapsack(weights, values, capacity):
    n = len(weights)
    dp = [[0] * (capacity + 1) for _ in range(n + 1)]

    for i in range(1, n + 1):
        for w in range(1, capacity + 1):
            if weights[i - 1] <= w:
                dp[i][w] = max(dp[i - 1][w], dp[i - 1][w - weights[i - 1]] + values[i - 1])
            else:
                dp[i][w] = dp[i - 1][w]

    return dp[n][capacity]

print(knapsack([1, 3, 4, 5], [1, 4, 5, 7], 7))